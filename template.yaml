AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
# Description: >
#   MROptimum SAM App

#   This SAM template describes the entire MROptimum AWS Architecture



Parameters:
  CortexHost: 
    Type: String
    Description: cm cortex
    Default: 'cancelit-env-1.eba-pmamcuv5.us-east-1.elasticbeanstalk.com'
  RoiBucketPName: 
    Type: String
    Description: rois bucket
    Default: 'eros-cmr-rois'
Globals:
  Function:
    Timeout: 60
    MemorySize: 180
    Environment:
      Variables:
        Host: !Ref CortexHost
        loginapi: !Sub https://${CortexHost}/api/auth/login
        logoutapi: !Sub https://${CortexHost}/api/auth/logout
        roisapi: !Sub https://${CortexHost}/api/roi
        RoisBucketName: !Ref RoiBucketPName

Resources:
  RoiBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref RoiBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred

  CMAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      # CORS configuration - this is open for development only and should be restricted in prod.
      # See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html   
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "*"   
        AllowOrigins:
          - "*"
        



  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: true
  

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function creates an object defining the job configuration (<pipeline-id>.json) 
        in the jobs bucket. It is triggered by POST /pipeline.
      PackageType: Zip
      CodeUri: cmr/
      Handler: app.login
      Runtime: python3.8
      Events:
        PostJobApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref CMAPI
            Path: /login
            Method: post
      Layers: 
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1

  LogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function runs the Mroptium computation (it is the muscle worker).
        It should be triggered when an object is created in the jobs bucket.   
      PackageType: Zip
      CodeUri: cmr/
      Handler: app.logout
      Runtime: python3.8
      Events:
        PostJobApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref CMAPI
            Path: /logout
            Method: post

      Layers: 
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1
  
  ProfileGetFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: profileGetFunction/
      Handler: app.handler
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 128
      Events:
        DownloadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /profile
            Method: get
            ApiId: !Ref CMAPI

  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: cmr/
      Handler: app.deleteROI
      Runtime: python3.8
      Events:
        DataReadApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref CMAPI
            Method: get
            Path: /deleteroi
            # only need the token bearer and the pipelineid

 
      Policies:
        - S3FullAccessPolicy:
        #get the ROIbucket from the resource
            # BucketName: !Ref RoiBucket
            BucketName: !Ref RoiBucketPName
        # This permission allows the Lambda function to request signed URLs
        # for objects that will be publicly readable. Uncomment if you want this ACL.

      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1


  GetRoiFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: cmr/
      Handler: app.getROISlist
      Runtime: python3.8
      Events:
        DataReadApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref CMAPI
            Method: get
            Path: /getrois
            # only need the token bearer and the pipelineid

 
      Policies:
        - S3FullAccessPolicy:
        #get the ROIbucket from the resource
            # BucketName: !Ref RoiBucket
            BucketName: !Ref RoiBucketPName
        # This permission allows the Lambda function to request signed URLs
        # for objects that will be publicly readable. Uncomment if you want this ACL.

      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1
  UploadRoiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ROISignedURL/
      Handler: app.handler
      Runtime: nodejs16.x
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref RoiBucketPName
        # This permission allows the Lambda function to request signed URLs
        # for objects that will be publicly readable. Uncomment if you want this ACL.
      Layers:
        - !Ref ROIRequestFunctionLayer
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /uploads
            Method: post
            ApiId: !Ref CMAPI

  
  ROIRequestFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: upload-node-layer
      ContentUri: ROISignedURL/
      CompatibleRuntimes:
        - nodejs16.x
    Metadata:
      BuildMethod: nodejs16.x
Outputs:
  LoginApi:
    Description: API Gateway endpoint URL for Prod stage for Queue function
    Value: !Sub "https://${CMAPI}.execute-api.${AWS::Region}.amazonaws.com/login"
  LogoutApi:
    Description: API Gateway endpoint URL for Prod stage for ReadData function
    Value: !Sub "https://${CMAPI}.execute-api.${AWS::Region}.amazonaws.com/logout"
  GetROISApi:
    Description: API Gateway endpoint URL for Prod stage for ReadData function
    Value: !Sub "https://${CMAPI}.execute-api.${AWS::Region}.amazonaws.com/getrois"
  UploadData:
    Description: "HTTP API endpoint URL to upload data"
    Value: !Sub "https://${CMAPI}.execute-api.${AWS::Region}.amazonaws.com/uploads"
  ProfileGetAPI:
    Description: API Gateway endpoint URL for Prod stage for Profile Get
    Value: !Sub "https://${CMAPI}.execute-api.${AWS::Region}.amazonaws.com/profile/"